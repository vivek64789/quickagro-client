// Mocks generated by Mockito 5.1.0 from annotations
// in quickagro/test/providers/auth_provider_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i3;

import 'package:quickagro/providers/auth_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i2.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  set email(String? _email) =>
      super.noSuchMethod(Invocation.setter(#email, _email),
          returnValueForMissingStub: null);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  set token(String? _token) =>
      super.noSuchMethod(Invocation.setter(#token, _token),
          returnValueForMissingStub: null);
  @override
  String get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: '') as String);
  @override
  set type(String? _type) => super.noSuchMethod(Invocation.setter(#type, _type),
      returnValueForMissingStub: null);
  @override
  String get profilePic =>
      (super.noSuchMethod(Invocation.getter(#profilePic), returnValue: '')
          as String);
  @override
  set profilePic(String? _profilePic) =>
      super.noSuchMethod(Invocation.setter(#profilePic, _profilePic),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic changeEmail(String? newEmail) =>
      super.noSuchMethod(Invocation.method(#changeEmail, [newEmail]));
  @override
  dynamic changeName(String? newName) =>
      super.noSuchMethod(Invocation.method(#changeName, [newName]));
  @override
  dynamic changeToken(String? newToken) =>
      super.noSuchMethod(Invocation.method(#changeToken, [newToken]));
  @override
  dynamic changeType(String? newType) =>
      super.noSuchMethod(Invocation.method(#changeType, [newType]));
  @override
  dynamic changeProfilePic(String? newProfilePic) =>
      super.noSuchMethod(Invocation.method(#changeProfilePic, [newProfilePic]));
  @override
  dynamic setAllValues(String? newEmail, String? newName, String? newToken,
          String? newType, String? newProfilePic) =>
      super.noSuchMethod(Invocation.method(#setAllValues,
          [newEmail, newName, newToken, newType, newProfilePic]));
  @override
  void addListener(_i3.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i3.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
